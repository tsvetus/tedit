{
  "title": {
    "caption": "'tedit' component library documentation"
  },
  "components": {
    "Readme": {
      "displayName": "Readme"
    },
    "TText": {
      "description": "Component representing single line text editor",
      "displayName": "TText",
      "methods": [],
      "example": {
        "name": "TTextExample"
      },
      "props": {
        "style": {
          "type": "shape",
          "description": "Component style:",
          "required": false,
          "structure": {
            "container": {
              "type": "object",
              "description": "Style for outer component container"
            },
            "label": {
              "type": "object",
              "description": "Style for component label"
            },
            "edit": {
              "type": "object",
              "description": "Style for component editor"
            },
            "icon": {
              "type": "object",
              "description": "Style for component icon"
            },
            "invalid": {
              "type": "shape",
              "description": "Style for invalid component state. Contains all listed above fields:",
              "structure": {
                "container": {
                  "type": "object"
                },
                "label": {
                  "type": "object"
                },
                "edit": {
                  "type": "object"
                },
                "icon": {
                  "type": "object"
                }
              }
            }
          }
        },
        "value": {
          "type": "string",
          "description": "Component initial value",
          "required": false
        },
        "name": {
          "type": "string",
          "description": "Any component name that associated with component and returned in \"onChange\" event in \"event.name\" field.\r\nIn addition component name can be used in global styles registered by \"registerStyles\" function to\r\nassociate particular style with this component",
          "required": false
        },
        "data": {
          "type": "any",
          "description": "Any data that associated with component and returned in \"onChange\" event in \"event.data\" field",
          "required": false
        },
        "label": {
          "type": "string",
          "description": "Label caption. Default is undefined and label is hidden",
          "required": false
        },
        "icon": {
          "type": "string",
          "description": "Icon name to show. Default is undefined and icon is hidden",
          "required": false
        },
        "timeout": {
          "type": "number",
          "description": "Represents timeout for \"onChange\" event in milliseconds. Default is \"700\"",
          "required": false
        },
        "placeholder": {
          "type": "string",
          "description": "Text to show when editor is empty",
          "required": false
        },
        "layout": {
          "type": "enum",
          "description": "Label position towards text editor. Can be one of:",
          "required": false,
          "defaultValue": "'left'",
          "structure": {
            "'top'": {},
            "'left'": {}
          }
        },
        "format": {
          "type": "shape",
          "description": "Text format. If specified entered text is checked with \"format.mask\" value:",
          "required": false,
          "structure": {
            "mask": {
              "type": "string",
              "description": "Text mask. \"N\" represents any number and \"A\" - any symbol"
            },
            "empty": {
              "type": "string",
              "description": "Empty char. If length of empty char is grate than 1 then only first character is used. Default is \"_\""
            },
            "full": {
              "type": "bool",
              "description": "If true then onChange event fires only if date is completely entered or completely cleared.\r\nDefault is \"true\""
            }
          }
        },
        "regexp": {
          "type": "object",
          "description": "Regular expression to validate entered text",
          "required": false
        },
        "empty": {
          "type": "any",
          "description": "Value appeared in onChange event when editor is empty. Default is \"null\"",
          "required": false,
          "defaultValue": "null"
        },
        "required": {
          "type": "any",
          "description": "Indicates if necessary to change component color when entered date is invalid or incomplete.\r\nDefault is \"true\"",
          "required": false,
          "defaultValue": "true"
        },
        "readOnly": {
          "type": "any",
          "description": "Prevents from changing component value from user input, Default is \"false\"",
          "required": false,
          "defaultValue": "false"
        },
        "onChange": {
          "type": "func",
          "description": "On text change event ",
          "arguments": {
            "event": {
              "name": "event",
              "type": "object",
              "description": "Event object with following structure:"
            },
            "event.name": {
              "name": "event.name",
              "type": "string",
              "description": "Component name from \"name\" property"
            },
            "event.data": {
              "name": "event.data",
              "type": "object",
              "description": "Component data from \"data\" property"
            },
            "event.value": {
              "name": "event.value",
              "type": "string",
              "description": "Entered text."
            }
          },
          "required": false
        },
        "onIcon": {
          "type": "func",
          "description": "On icon click event ",
          "arguments": {
            "event": {
              "name": "event",
              "type": "object",
              "description": "Event object with following structure:"
            },
            "event.name": {
              "name": "event.name",
              "type": "string",
              "description": "Component name from \"name\" property"
            },
            "event.data": {
              "name": "event.data",
              "type": "object",
              "description": "Component data from \"data\" property"
            },
            "event.icon": {
              "name": "event.icon",
              "type": "string",
              "description": "Clicked icon name"
            }
          },
          "required": false
        },
        "onValidate": {
          "type": "func",
          "description": "On text validate event. Fires if text validation is needed. Must return \"true\" if text is valid or \"false\" in other cases ",
          "arguments": {
            "event": {
              "name": "event",
              "type": "object",
              "description": "Event object with following structure:"
            },
            "event.name": {
              "name": "event.name",
              "type": "string",
              "description": "Component name from \"name\" property"
            },
            "event.data": {
              "name": "event.data",
              "type": "object",
              "description": "Component data from \"data\" property"
            },
            "event.value": {
              "name": "event.value",
              "type": "string",
              "description": "Text to validate"
            }
          },
          "required": false
        },
        "onMask": {
          "type": "func",
          "description": "",
          "required": false
        }
      }
    },
    "TMemo": {
      "description": "Component representing multiline editor",
      "displayName": "TMemo",
      "methods": [
        {
          "name": "handleIcon",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        }
      ],
      "example": {
        "name": "TMemoExample"
      },
      "props": {
        "style": {
          "type": "shape",
          "description": "Component style:",
          "required": false,
          "structure": {
            "container": {
              "type": "object",
              "description": "Style for outer component container"
            },
            "label": {
              "type": "object",
              "description": "Style for component label"
            },
            "edit": {
              "type": "object",
              "description": "Style for component editor"
            },
            "icon": {
              "type": "object",
              "description": "Style for component icon"
            },
            "invalid": {
              "type": "shape",
              "description": "Style for invalid component state. Contains all listed above fields:",
              "structure": {
                "container": {
                  "type": "object"
                },
                "label": {
                  "type": "object"
                },
                "edit": {
                  "type": "object"
                },
                "icon": {
                  "type": "object"
                }
              }
            }
          }
        },
        "value": {
          "type": "string",
          "description": "Component initial value",
          "required": false
        },
        "name": {
          "type": "string",
          "description": "Any component name that associated with component and returned in \"onChange\" event in \"event.name\" field.\r\nIn addition component name can be used in global styles registered by \"registerStyles\" function to\r\nassociate particular style with this component",
          "required": false
        },
        "data": {
          "type": "any",
          "description": "Any data that associated with component and returned in \"onChange\" event in \"event.data\" field",
          "required": false
        },
        "label": {
          "type": "string",
          "description": "Label caption. Default is undefined and label is hidden",
          "required": false
        },
        "icon": {
          "type": "string",
          "description": "Icon name to show. Default is undefined and icon is hidden",
          "required": false
        },
        "timeout": {
          "type": "number",
          "description": "Represents timeout for \"onChange\" event in milliseconds. Default is \"700\"",
          "required": false
        },
        "placeholder": {
          "type": "string",
          "description": "Text to show when editor is empty",
          "required": false
        },
        "wrap": {
          "type": "any",
          "description": "If \"true\" editor preserves end of line characters in text and allows to wrap text when Enter key is pressed.\r\nOtherwise (by default) it ignores new line characters and entered text treated as single string",
          "required": false,
          "defaultValue": "false"
        },
        "empty": {
          "type": "any",
          "description": "Value appeared in onChange event when editor is empty. Default is \"null\"",
          "required": false,
          "defaultValue": "null"
        },
        "readOnly": {
          "type": "any",
          "description": "Prevents from changing component value from user input, Default is \"false\"",
          "required": false,
          "defaultValue": "false"
        },
        "onChange": {
          "type": "func",
          "description": "On text change event ",
          "arguments": {
            "event": {
              "name": "event",
              "type": "object",
              "description": "Event object with following structure:"
            },
            "event.name": {
              "name": "event.name",
              "type": "string",
              "description": "Component name from \"name\" property"
            },
            "event.data": {
              "name": "event.data",
              "type": "object",
              "description": "Component data from \"data\" property"
            },
            "event.value": {
              "name": "event.value",
              "type": "string",
              "description": "Entered text."
            }
          },
          "required": false
        },
        "onIcon": {
          "type": "func",
          "description": "On icon click event ",
          "arguments": {
            "event": {
              "name": "event",
              "type": "object",
              "description": "Event object with following structure:"
            },
            "event.name": {
              "name": "event.name",
              "type": "string",
              "description": "Component name from \"name\" property"
            },
            "event.data": {
              "name": "event.data",
              "type": "object",
              "description": "Component data from \"data\" property"
            },
            "event.icon": {
              "name": "event.icon",
              "type": "string",
              "description": "Clicked icon name"
            }
          },
          "required": false
        }
      }
    },
    "TListBox": {
      "description": "Represents list box",
      "displayName": "TListBox",
      "methods": [],
      "example": {
        "name": "TListBoxExample"
      },
      "props": {
        "style": {
          "type": "shape",
          "description": "Component style:",
          "required": false,
          "structure": {
            "container": {
              "type": "object",
              "description": "Style for outer component container"
            },
            "label": {
              "type": "object",
              "description": "Style for component label"
            },
            "edit": {
              "type": "object",
              "description": "Style for component editor"
            },
            "icon": {
              "type": "object",
              "description": "Style for component icon"
            },
            "list": {
              "type": "shape",
              "description": "Style for dropdown list. Contains all listed above fields:",
              "structure": {
                "container": {
                  "type": "object",
                  "description": "Style for dropdown list container"
                },
                "item": {
                  "type": "object",
                  "description": "Style for list items"
                },
                "selected": {
                  "type": "object",
                  "description": "Style for selected list item"
                }
              }
            }
          }
        },
        "value": {
          "type": "any",
          "description": "Component initial value. Contains \"key\" value of default list item",
          "required": false
        },
        "name": {
          "type": "string",
          "description": "Any component name that associated with component and returned in \"onChange\" event in \"event.name\" field.\r\nIn addition component name can be used in global styles registered by \"registerStyles\" function to\r\nassociate particular style with this component",
          "required": false
        },
        "data": {
          "type": "any",
          "description": "Any data that associated with component and returned in \"onChange\" event in \"event.data\" field",
          "required": false
        },
        "label": {
          "type": "string",
          "description": "Label caption. Default is undefined and label is hidden",
          "required": false
        },
        "timeout": {
          "type": "number",
          "description": "Icon name to show. Default is undefined and icon is hidden",
          "required": false
        },
        "placeholder": {
          "type": "string",
          "description": "Text to show when editor is empty",
          "required": false
        },
        "layout": {
          "type": "enum",
          "description": "Label position towards text editor. Can be one of:",
          "required": false,
          "structure": {
            "'top'": {},
            "'left'": {}
          }
        },
        "empty": {
          "type": "any",
          "description": "Value appeared in onChange event when editor is empty. Default is \"null\"",
          "required": false
        },
        "required": {
          "type": "any",
          "description": "Indicates if necessary to change component color when entered date is invalid or incomplete.\r\nDefault is \"true\"",
          "required": false
        },
        "readOnly": {
          "type": "any",
          "description": "Prevents from changing component value from user input",
          "required": false
        },
        "showIcon": {
          "type": "any",
          "description": "If \"true\" drop up/down indicator is shown",
          "required": false,
          "defaultValue": "true"
        },
        "items": {
          "type": "arrayOf",
          "description": "List of dropdown items",
          "required": false,
          "structure": {
            "key": {
              "type": "any",
              "description": "Item key field"
            },
            "value": {
              "type": "string",
              "description": "Item name"
            }
          }
        },
        "chars": {
          "type": "number",
          "description": "",
          "required": false,
          "defaultValue": "3"
        },
        "listMode": {
          "type": "string",
          "description": "Determines what part of \"item\" should be shown in dropdown list",
          "required": false,
          "defaultValue": "'value'"
        },
        "showMode": {
          "type": "string",
          "description": "Determines what part of \"item\" should be shown in editor",
          "required": false,
          "defaultValue": "'value'"
        },
        "clickable": {
          "type": "string",
          "description": "Determines what components reacts on \"onClick\" events",
          "required": false,
          "defaultValue": "'label edit'"
        },
        "onChange": {
          "type": "func",
          "description": "On text change event ",
          "arguments": {
            "event": {
              "name": "event",
              "type": "object",
              "description": "Event object with following structure:"
            },
            "event.name": {
              "name": "event.name",
              "type": "string",
              "description": "Component name from \"name\" property"
            },
            "event.data": {
              "name": "event.data",
              "type": "object",
              "description": "Component data from \"data\" property"
            },
            "event.value": {
              "name": "event.value",
              "type": "string",
              "description": "Selected item \"key\" value"
            },
            "event.index": {
              "name": "event.index",
              "type": "string",
              "description": "Selected item index"
            },
            "event.item": {
              "name": "event.item",
              "type": "string",
              "description": "Selected item"
            }
          },
          "required": false
        },
        "onIcon": {
          "type": "func",
          "description": "On icon click event ",
          "arguments": {
            "event": {
              "name": "event",
              "type": "object",
              "description": "Event object with following structure:"
            },
            "event.name": {
              "name": "event.name",
              "type": "string",
              "description": "Component name from \"name\" property"
            },
            "event.data": {
              "name": "event.data",
              "type": "object",
              "description": "Component data from \"data\" property"
            },
            "event.icon": {
              "name": "event.icon",
              "type": "string",
              "description": "Clicked icon name"
            }
          },
          "required": false
        },
        "onValidate": {
          "type": "func",
          "description": "On text validate event. Fires if text validation is needed. Must return \"true\" if text is valid or \"false\" in other cases ",
          "arguments": {
            "event": {
              "name": "event",
              "type": "object",
              "description": "Event object with following structure:"
            },
            "event.name": {
              "name": "event.name",
              "type": "string",
              "description": "Component name from \"name\" property"
            },
            "event.data": {
              "name": "event.data",
              "type": "object",
              "description": "Component data from \"data\" property"
            },
            "event.value": {
              "name": "event.value",
              "type": "string",
              "description": "Text to validate"
            }
          },
          "required": false
        },
        "onSearch": {
          "type": "func",
          "description": "",
          "required": false
        }
      }
    },
    "TSearch": {
      "description": "",
      "displayName": "TSearch",
      "methods": [],
      "example": {
        "name": "TSearchExample"
      },
      "props": {
        "style": {
          "type": "object",
          "description": "",
          "required": false
        },
        "value": {
          "type": "any",
          "description": "",
          "required": false
        },
        "name": {
          "type": "string",
          "description": "",
          "required": false
        },
        "data": {
          "type": "any",
          "description": "",
          "required": false
        },
        "label": {
          "type": "string",
          "description": "",
          "required": false
        },
        "showIcon": {
          "type": "any",
          "description": "",
          "required": false,
          "defaultValue": "true"
        },
        "timeout": {
          "type": "number",
          "description": "",
          "required": false
        },
        "placeholder": {
          "type": "string",
          "description": "",
          "required": false
        },
        "chars": {
          "type": "number",
          "description": "",
          "required": false,
          "defaultValue": "3"
        },
        "listMode": {
          "type": "string",
          "description": "",
          "required": false
        },
        "clickable": {
          "type": "string",
          "description": "",
          "required": false
        },
        "showMode": {
          "type": "string",
          "description": "",
          "required": false
        },
        "onChange": {
          "type": "func",
          "description": "",
          "required": false
        },
        "onValidate": {
          "type": "func",
          "description": "",
          "required": false
        },
        "onSearch": {
          "type": "func",
          "description": "",
          "required": false
        }
      }
    },
    "TButton": {
      "description": "Clickable button with text caption",
      "displayName": "TButton",
      "methods": [
        {
          "name": "handleClick",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        }
      ],
      "example": {
        "name": "TButtonExample"
      },
      "props": {
        "style": {
          "type": "shape",
          "description": "Component style:",
          "required": false,
          "structure": {
            "container": {
              "type": "object",
              "description": "Style for outer component container"
            }
          }
        },
        "name": {
          "type": "string",
          "description": "Component name",
          "required": false
        },
        "data": {
          "type": "any",
          "description": "Component data",
          "required": false
        },
        "wait": {
          "type": "any",
          "description": "Component wait state. When \"true\" component appears in grey color and doesn't respond\r\non \"onClick\" event",
          "required": false
        },
        "onClick": {
          "type": "func",
          "description": "On click event ",
          "arguments": {
            "event": {
              "name": "event",
              "type": "object",
              "description": "Event object with following structure:"
            },
            "event.name": {
              "name": "event.name",
              "type": "string",
              "description": "Component name from \"name\" property"
            },
            "event.data": {
              "name": "event.data",
              "type": "object",
              "description": "Component data from \"data\" property"
            }
          },
          "required": false
        }
      }
    },
    "TDate": {
      "description": "Date editor with masked input and date value validation",
      "displayName": "TDate",
      "methods": [
        {
          "name": "handleValidate",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "event",
              "type": null
            }
          ],
          "returns": null
        },
        {
          "name": "handleChange",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "event",
              "type": null
            }
          ],
          "returns": null
        }
      ],
      "example": {
        "name": "TDateExample"
      },
      "props": {
        "style": {
          "type": "shape",
          "description": "Component style:",
          "required": false,
          "structure": {
            "container": {
              "type": "object",
              "description": "Style for outer component container"
            },
            "label": {
              "type": "object",
              "description": "Style for component label"
            },
            "edit": {
              "type": "object",
              "description": "Style for component editor"
            },
            "icon": {
              "type": "object",
              "description": "Style for component icon"
            },
            "invalid": {
              "type": "shape",
              "description": "Style for invalid component state. Contains all listed above fields:",
              "structure": {
                "container": {
                  "type": "object"
                },
                "label": {
                  "type": "object"
                },
                "edit": {
                  "type": "object"
                },
                "icon": {
                  "type": "object"
                }
              }
            }
          }
        },
        "value": {
          "type": "union",
          "description": "Component initial value. Can be one of:",
          "required": false,
          "structure": {
            "string": {
              "description": "Date in \"iso\" format (\"YYYY-MM-DD\")"
            },
            "Date": {
              "description": "Native JavaScript Date"
            }
          }
        },
        "name": {
          "type": "string",
          "description": "Any component name that associated with component and returned in \"onChange\" event in \"event.name\" field.\r\nIn addition component name can be used in global styles registered by \"registerStyles\" function to\r\nassociate particular style with this component",
          "required": false
        },
        "data": {
          "type": "any",
          "description": "Any data that associated with component and returned in \"onChange\" event in \"event.data\" field",
          "required": false
        },
        "label": {
          "type": "string",
          "description": "Label caption. Default is undefined and label is hidden",
          "required": false
        },
        "layout": {
          "type": "enum",
          "description": "Label position towards text editor. Can be one of:",
          "required": false,
          "defaultValue": "'left'",
          "structure": {
            "'top'": {},
            "'left'": {}
          }
        },
        "icon": {
          "type": "string",
          "description": "Icon name to show. Default is undefined and icon is hidden",
          "required": false
        },
        "timeout": {
          "type": "number",
          "description": "Represents timeout for \"onChange\" event in milliseconds. Default is \"700\"",
          "required": false
        },
        "format": {
          "type": "shape",
          "description": "Date format:",
          "required": false,
          "defaultValue": "{mask: 'DD.MM.YYYY', empty: '_', full: true, type: 'iso'}",
          "structure": {
            "mask": {
              "type": "string",
              "description": "Date mask. Default is \"DD.MM.YYYY\""
            },
            "empty": {
              "type": "string",
              "description": "Empty char. If length of empty char is grate than 1 then only first character is used. Default is \"_\""
            },
            "full": {
              "type": "bool",
              "description": "If true then onChange event fires only if date is completely entered or completely cleared.\r\nDefault is \"true\""
            },
            "type": {
              "type": "enum of ['iso', 'native']",
              "description": "Date format appeared in onChange event. Default is \"iso\" (\"YYYY-MM-DD\")"
            }
          }
        },
        "empty": {
          "type": "any",
          "description": "Value appeared in onChange event then date is not completely entered or invalid. Default is \"null\"",
          "required": false,
          "defaultValue": "null"
        },
        "required": {
          "type": "any",
          "description": "Indicates if necessary to change component color when entered date is invalid or incomplete.\r\nDefault is \"true\"",
          "required": false,
          "defaultValue": "true"
        },
        "readOnly": {
          "type": "any",
          "description": "Prevents from changing component value from user input, Default is \"false\"",
          "required": false,
          "defaultValue": "false"
        },
        "onChange": {
          "type": "func",
          "description": "On date change event ",
          "arguments": {
            "event": {
              "name": "event",
              "type": "object",
              "description": "Event object with following structure:"
            },
            "event.name": {
              "name": "event.name",
              "type": "string",
              "description": "Component name from \"name\" property"
            },
            "event.data": {
              "name": "event.data",
              "type": "object",
              "description": "Component data from \"data\" property"
            },
            "event.value": {
              "name": "event.value",
              "type": "any",
              "description": "Component date value. Date value format is determined by \"format.type\" property."
            }
          },
          "required": false
        },
        "onIcon": {
          "type": "func",
          "description": "On icon click event ",
          "arguments": {
            "event": {
              "name": "event",
              "type": "object",
              "description": "Event object with following structure:"
            },
            "event.name": {
              "name": "event.name",
              "type": "string",
              "description": "Component name from \"name\" property"
            },
            "event.data": {
              "name": "event.data",
              "type": "object",
              "description": "Component data from \"data\" property"
            },
            "event.icon": {
              "name": "event.icon",
              "type": "string",
              "description": "Clicked icon name"
            }
          },
          "required": false
        }
      }
    },
    "TTime": {
      "description": "Time editor with time value validation",
      "displayName": "TTime",
      "methods": [
        {
          "name": "handleValidate",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "event",
              "type": null
            }
          ],
          "returns": null
        },
        {
          "name": "handleChange",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "event",
              "type": null
            }
          ],
          "returns": null
        }
      ],
      "example": {
        "name": "TTimeExample"
      },
      "props": {
        "style": {
          "type": "shape",
          "description": "Component style:",
          "required": false,
          "structure": {
            "container": {
              "type": "object",
              "description": "Style for outer component container"
            },
            "label": {
              "type": "object",
              "description": "Style for component label"
            },
            "edit": {
              "type": "object",
              "description": "Style for component editor"
            },
            "icon": {
              "type": "object",
              "description": "Style for component icon"
            },
            "invalid": {
              "type": "shape",
              "description": "Style for invalid component state. Contains all listed above fields:",
              "structure": {
                "container": {
                  "type": "object"
                },
                "label": {
                  "type": "object"
                },
                "edit": {
                  "type": "object"
                },
                "icon": {
                  "type": "object"
                }
              }
            }
          }
        },
        "value": {
          "type": "union",
          "description": "Component initial value. Can be one of:",
          "required": false,
          "structure": {
            "string": {
              "description": "Time in \"iso\" format (\"hh:mm:ss\")"
            },
            "Date": {
              "description": "Native JavaScript Date"
            }
          }
        },
        "name": {
          "type": "string",
          "description": "Any component name that associated with component and returned in \"onChange\" event in \"event.name\" field.\r\nIn addition component name can be used in global styles registered by \"registerStyles\" function to\r\nassociate particular style with this component",
          "required": false
        },
        "data": {
          "type": "any",
          "description": "Any data that associated with component and returned in \"onChange\" event in \"event.data\" field",
          "required": false
        },
        "label": {
          "type": "string",
          "description": "Label caption. Default is undefined and label is hidden",
          "required": false
        },
        "layout": {
          "type": "enum",
          "description": "Label position towards text editor. Can be one of:",
          "required": false,
          "defaultValue": "'left'",
          "structure": {
            "'top'": {},
            "'left'": {}
          }
        },
        "icon": {
          "type": "string",
          "description": "Icon name to show. Default is undefined and icon is hidden",
          "required": false
        },
        "timeout": {
          "type": "number",
          "description": "Represents timeout for \"onChange\" event in milliseconds. Default is \"700\"",
          "required": false
        },
        "format": {
          "type": "shape",
          "description": "Time format:",
          "required": false,
          "defaultValue": "{mask: 'hh:mm', empty: '_', full: true, type: 'iso'}",
          "structure": {
            "mask": {
              "type": "string",
              "description": "Date mask. Default is \"hh:mm\""
            },
            "empty": {
              "type": "string",
              "description": "Empty char. If length of empty char is grate than 1 then only first character is used. Default is \"_\""
            },
            "full": {
              "type": "bool",
              "description": "If true then onChange event fires only if date is completely entered or completely cleared.\r\nDefault is \"true\""
            },
            "type": {
              "type": "enum of ['iso', 'native']",
              "description": "Time format appeared in onChange event. Default is \"iso\" (\"hh:mm:ss\")"
            }
          }
        },
        "empty": {
          "type": "any",
          "description": "Value appeared in onChange event then date is not completely entered or invalid. Default is \"null\"",
          "required": false,
          "defaultValue": "null"
        },
        "required": {
          "type": "any",
          "description": "Indicates if necessary to change component color when entered time is invalid or incomplete.\r\nDefault is \"true\"",
          "required": false,
          "defaultValue": "true"
        },
        "readOnly": {
          "type": "any",
          "description": "Prevents from changing component value from user input, Default is \"false\"",
          "required": false,
          "defaultValue": "false"
        },
        "onChange": {
          "type": "func",
          "description": "On date change event ",
          "arguments": {
            "event": {
              "name": "event",
              "type": "object",
              "description": "Event object with following structure:"
            },
            "event.name": {
              "name": "event.name",
              "type": "string",
              "description": "Component name from \"name\" property"
            },
            "event.data": {
              "name": "event.data",
              "type": "object",
              "description": "Component data from \"data\" property"
            },
            "event.value": {
              "name": "event.value",
              "type": "any",
              "description": "Component date value. Time value format is determined by \"format.type\" property."
            }
          },
          "required": false
        },
        "onIcon": {
          "type": "func",
          "description": "On icon click event ",
          "arguments": {
            "event": {
              "name": "event",
              "type": "object",
              "description": "Event object with following structure:"
            },
            "event.name": {
              "name": "event.name",
              "type": "string",
              "description": "Component name from \"name\" property"
            },
            "event.data": {
              "name": "event.data",
              "type": "object",
              "description": "Component data from \"data\" property"
            },
            "event.icon": {
              "name": "event.icon",
              "type": "string",
              "description": "Clicked icon name"
            }
          },
          "required": false
        }
      }
    },
    "TCheck": {
      "description": "Represents checkbox with label",
      "displayName": "TCheck",
      "methods": [
        {
          "name": "handleIcon",
          "docblock": null,
          "modifiers": [],
          "params": [],
          "returns": null
        },
        {
          "name": "handleChange",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "event",
              "type": null
            }
          ],
          "returns": null
        },
        {
          "name": "updateChecked",
          "docblock": null,
          "modifiers": [],
          "params": [
            {
              "name": "value",
              "type": null
            },
            {
              "name": "change",
              "type": null
            }
          ],
          "returns": null
        }
      ],
      "example": {
        "name": "TCheckExample"
      },
      "props": {
        "style": {
          "type": "shape",
          "description": "Component style:",
          "required": false,
          "structure": {
            "container": {
              "type": "object",
              "description": "Style for outer component container"
            },
            "label": {
              "type": "object",
              "description": "Style for component label"
            },
            "icon": {
              "type": "object",
              "description": "Style for component icon"
            }
          }
        },
        "value": {
          "type": "any",
          "description": "Component initial value",
          "required": false
        },
        "name": {
          "type": "string",
          "description": "Any component name that associated with component and returned in \"onChange\" event in \"event.name\" field.\r\nIn addition component name can be used in global styles registered by \"registerStyles\" function to\r\nassociate particular style with this component",
          "required": false
        },
        "data": {
          "type": "any",
          "description": "Any data that associated with component and returned in \"onChange\" event in \"event.data\" field",
          "required": false
        },
        "label": {
          "type": "string",
          "description": "Label caption. Default is undefined and label is hidden",
          "required": false
        },
        "checked": {
          "type": "any",
          "description": "Checked state value",
          "required": false,
          "defaultValue": "true"
        },
        "unchecked": {
          "type": "any",
          "description": "Unchecked state value",
          "required": false,
          "defaultValue": "false"
        },
        "onChange": {
          "type": "func",
          "description": "On click event ",
          "arguments": {
            "event": {
              "name": "event",
              "type": "object",
              "description": "event object with following structure:"
            },
            "event.name": {
              "name": "event.name",
              "type": "string",
              "description": "component name from \"name\" property"
            },
            "event.data": {
              "name": "event.data",
              "type": "object",
              "description": "component data from \"data\" property"
            },
            "event.value": {
              "name": "event.value",
              "type": "object",
              "description": "component value. If component state is checked then \"value\" equals to \"checked\" property. Otherwise it equals to \"unchecked\" property"
            }
          },
          "required": false
        }
      }
    }
  }
}